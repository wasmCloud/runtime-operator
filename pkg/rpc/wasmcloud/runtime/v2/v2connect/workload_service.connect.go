// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wasmcloud/runtime/v2/workload_service.proto

package v2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/wasmCloud/runtime-operator/pkg/rpc/wasmcloud/runtime/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkloadServiceName is the fully-qualified name of the WorkloadService service.
	WorkloadServiceName = "wasmcloud.runtime.v2.WorkloadService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkloadServiceWorkloadStartProcedure is the fully-qualified name of the WorkloadService's
	// WorkloadStart RPC.
	WorkloadServiceWorkloadStartProcedure = "/wasmcloud.runtime.v2.WorkloadService/WorkloadStart"
	// WorkloadServiceWorkloadStatusProcedure is the fully-qualified name of the WorkloadService's
	// WorkloadStatus RPC.
	WorkloadServiceWorkloadStatusProcedure = "/wasmcloud.runtime.v2.WorkloadService/WorkloadStatus"
	// WorkloadServiceWorkloadStopProcedure is the fully-qualified name of the WorkloadService's
	// WorkloadStop RPC.
	WorkloadServiceWorkloadStopProcedure = "/wasmcloud.runtime.v2.WorkloadService/WorkloadStop"
)

// WorkloadServiceClient is a client for the wasmcloud.runtime.v2.WorkloadService service.
type WorkloadServiceClient interface {
	WorkloadStart(context.Context, *connect.Request[v2.WorkloadStartRequest]) (*connect.Response[v2.WorkloadStartResponse], error)
	WorkloadStatus(context.Context, *connect.Request[v2.WorkloadStatusRequest]) (*connect.Response[v2.WorkloadStatusResponse], error)
	WorkloadStop(context.Context, *connect.Request[v2.WorkloadStopRequest]) (*connect.Response[v2.WorkloadStopResponse], error)
}

// NewWorkloadServiceClient constructs a client for the wasmcloud.runtime.v2.WorkloadService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkloadServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkloadServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workloadServiceMethods := v2.File_wasmcloud_runtime_v2_workload_service_proto.Services().ByName("WorkloadService").Methods()
	return &workloadServiceClient{
		workloadStart: connect.NewClient[v2.WorkloadStartRequest, v2.WorkloadStartResponse](
			httpClient,
			baseURL+WorkloadServiceWorkloadStartProcedure,
			connect.WithSchema(workloadServiceMethods.ByName("WorkloadStart")),
			connect.WithClientOptions(opts...),
		),
		workloadStatus: connect.NewClient[v2.WorkloadStatusRequest, v2.WorkloadStatusResponse](
			httpClient,
			baseURL+WorkloadServiceWorkloadStatusProcedure,
			connect.WithSchema(workloadServiceMethods.ByName("WorkloadStatus")),
			connect.WithClientOptions(opts...),
		),
		workloadStop: connect.NewClient[v2.WorkloadStopRequest, v2.WorkloadStopResponse](
			httpClient,
			baseURL+WorkloadServiceWorkloadStopProcedure,
			connect.WithSchema(workloadServiceMethods.ByName("WorkloadStop")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workloadServiceClient implements WorkloadServiceClient.
type workloadServiceClient struct {
	workloadStart  *connect.Client[v2.WorkloadStartRequest, v2.WorkloadStartResponse]
	workloadStatus *connect.Client[v2.WorkloadStatusRequest, v2.WorkloadStatusResponse]
	workloadStop   *connect.Client[v2.WorkloadStopRequest, v2.WorkloadStopResponse]
}

// WorkloadStart calls wasmcloud.runtime.v2.WorkloadService.WorkloadStart.
func (c *workloadServiceClient) WorkloadStart(ctx context.Context, req *connect.Request[v2.WorkloadStartRequest]) (*connect.Response[v2.WorkloadStartResponse], error) {
	return c.workloadStart.CallUnary(ctx, req)
}

// WorkloadStatus calls wasmcloud.runtime.v2.WorkloadService.WorkloadStatus.
func (c *workloadServiceClient) WorkloadStatus(ctx context.Context, req *connect.Request[v2.WorkloadStatusRequest]) (*connect.Response[v2.WorkloadStatusResponse], error) {
	return c.workloadStatus.CallUnary(ctx, req)
}

// WorkloadStop calls wasmcloud.runtime.v2.WorkloadService.WorkloadStop.
func (c *workloadServiceClient) WorkloadStop(ctx context.Context, req *connect.Request[v2.WorkloadStopRequest]) (*connect.Response[v2.WorkloadStopResponse], error) {
	return c.workloadStop.CallUnary(ctx, req)
}

// WorkloadServiceHandler is an implementation of the wasmcloud.runtime.v2.WorkloadService service.
type WorkloadServiceHandler interface {
	WorkloadStart(context.Context, *connect.Request[v2.WorkloadStartRequest]) (*connect.Response[v2.WorkloadStartResponse], error)
	WorkloadStatus(context.Context, *connect.Request[v2.WorkloadStatusRequest]) (*connect.Response[v2.WorkloadStatusResponse], error)
	WorkloadStop(context.Context, *connect.Request[v2.WorkloadStopRequest]) (*connect.Response[v2.WorkloadStopResponse], error)
}

// NewWorkloadServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkloadServiceHandler(svc WorkloadServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workloadServiceMethods := v2.File_wasmcloud_runtime_v2_workload_service_proto.Services().ByName("WorkloadService").Methods()
	workloadServiceWorkloadStartHandler := connect.NewUnaryHandler(
		WorkloadServiceWorkloadStartProcedure,
		svc.WorkloadStart,
		connect.WithSchema(workloadServiceMethods.ByName("WorkloadStart")),
		connect.WithHandlerOptions(opts...),
	)
	workloadServiceWorkloadStatusHandler := connect.NewUnaryHandler(
		WorkloadServiceWorkloadStatusProcedure,
		svc.WorkloadStatus,
		connect.WithSchema(workloadServiceMethods.ByName("WorkloadStatus")),
		connect.WithHandlerOptions(opts...),
	)
	workloadServiceWorkloadStopHandler := connect.NewUnaryHandler(
		WorkloadServiceWorkloadStopProcedure,
		svc.WorkloadStop,
		connect.WithSchema(workloadServiceMethods.ByName("WorkloadStop")),
		connect.WithHandlerOptions(opts...),
	)
	return "/wasmcloud.runtime.v2.WorkloadService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkloadServiceWorkloadStartProcedure:
			workloadServiceWorkloadStartHandler.ServeHTTP(w, r)
		case WorkloadServiceWorkloadStatusProcedure:
			workloadServiceWorkloadStatusHandler.ServeHTTP(w, r)
		case WorkloadServiceWorkloadStopProcedure:
			workloadServiceWorkloadStopHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkloadServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkloadServiceHandler struct{}

func (UnimplementedWorkloadServiceHandler) WorkloadStart(context.Context, *connect.Request[v2.WorkloadStartRequest]) (*connect.Response[v2.WorkloadStartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wasmcloud.runtime.v2.WorkloadService.WorkloadStart is not implemented"))
}

func (UnimplementedWorkloadServiceHandler) WorkloadStatus(context.Context, *connect.Request[v2.WorkloadStatusRequest]) (*connect.Response[v2.WorkloadStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wasmcloud.runtime.v2.WorkloadService.WorkloadStatus is not implemented"))
}

func (UnimplementedWorkloadServiceHandler) WorkloadStop(context.Context, *connect.Request[v2.WorkloadStopRequest]) (*connect.Response[v2.WorkloadStopResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wasmcloud.runtime.v2.WorkloadService.WorkloadStop is not implemented"))
}
