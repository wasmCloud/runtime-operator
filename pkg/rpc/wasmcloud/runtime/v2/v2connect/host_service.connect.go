// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wasmcloud/runtime/v2/host_service.proto

package v2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "go.wasmcloud.dev/runtime-operator/pkg/rpc/wasmcloud/runtime/v2"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HostServiceName is the fully-qualified name of the HostService service.
	HostServiceName = "wasmcloud.runtime.v2.HostService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HostServiceHostHeartbeatProcedure is the fully-qualified name of the HostService's HostHeartbeat
	// RPC.
	HostServiceHostHeartbeatProcedure = "/wasmcloud.runtime.v2.HostService/HostHeartbeat"
)

// HostServiceClient is a client for the wasmcloud.runtime.v2.HostService service.
type HostServiceClient interface {
	// Periodic heartbeat
	// This information is used by the Runtime Operator to monitor the health of the Wasm Host & make placement decisions.
	HostHeartbeat(context.Context, *connect.Request[v2.HostHeartbeatRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewHostServiceClient constructs a client for the wasmcloud.runtime.v2.HostService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHostServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HostServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hostServiceMethods := v2.File_wasmcloud_runtime_v2_host_service_proto.Services().ByName("HostService").Methods()
	return &hostServiceClient{
		hostHeartbeat: connect.NewClient[v2.HostHeartbeatRequest, emptypb.Empty](
			httpClient,
			baseURL+HostServiceHostHeartbeatProcedure,
			connect.WithSchema(hostServiceMethods.ByName("HostHeartbeat")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hostServiceClient implements HostServiceClient.
type hostServiceClient struct {
	hostHeartbeat *connect.Client[v2.HostHeartbeatRequest, emptypb.Empty]
}

// HostHeartbeat calls wasmcloud.runtime.v2.HostService.HostHeartbeat.
func (c *hostServiceClient) HostHeartbeat(ctx context.Context, req *connect.Request[v2.HostHeartbeatRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.hostHeartbeat.CallUnary(ctx, req)
}

// HostServiceHandler is an implementation of the wasmcloud.runtime.v2.HostService service.
type HostServiceHandler interface {
	// Periodic heartbeat
	// This information is used by the Runtime Operator to monitor the health of the Wasm Host & make placement decisions.
	HostHeartbeat(context.Context, *connect.Request[v2.HostHeartbeatRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewHostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHostServiceHandler(svc HostServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hostServiceMethods := v2.File_wasmcloud_runtime_v2_host_service_proto.Services().ByName("HostService").Methods()
	hostServiceHostHeartbeatHandler := connect.NewUnaryHandler(
		HostServiceHostHeartbeatProcedure,
		svc.HostHeartbeat,
		connect.WithSchema(hostServiceMethods.ByName("HostHeartbeat")),
		connect.WithHandlerOptions(opts...),
	)
	return "/wasmcloud.runtime.v2.HostService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HostServiceHostHeartbeatProcedure:
			hostServiceHostHeartbeatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHostServiceHandler struct{}

func (UnimplementedHostServiceHandler) HostHeartbeat(context.Context, *connect.Request[v2.HostHeartbeatRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wasmcloud.runtime.v2.HostService.HostHeartbeat is not implemented"))
}
