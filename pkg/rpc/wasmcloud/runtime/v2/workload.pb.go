// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: wasmcloud/runtime/v2/workload.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkloadState int32

const (
	// Sentinel value, should not be used
	WorkloadState_WORKLOAD_STATE_UNSPECIFIED WorkloadState = 0
	// Workload "start" received by the host and workload is starting.
	// The workload_id is now in the host's internal state.
	// The host might have not performed internal checks yet, resulting in
	// the workload not being started and going into the "error" state.
	WorkloadState_WORKLOAD_STATE_STARTING WorkloadState = 1
	// Workload passed checks and is considered running
	WorkloadState_WORKLOAD_STATE_RUNNING WorkloadState = 2
	// Workload completed execution
	// This indicates the workload executed to completion
	// Useful for wasi:cli/run workloads
	WorkloadState_WORKLOAD_STATE_COMPLETED WorkloadState = 3
	// Workload "stop" received and stopping
	// The host continues to report the workload status
	// until the workload is fully stopped.
	// Then the host removes the workload from its internal state.
	WorkloadState_WORKLOAD_STATE_STOPPING WorkloadState = 4
	// Workload failed to start or stopped due to an error
	WorkloadState_WORKLOAD_STATE_ERROR WorkloadState = 5
)

// Enum value maps for WorkloadState.
var (
	WorkloadState_name = map[int32]string{
		0: "WORKLOAD_STATE_UNSPECIFIED",
		1: "WORKLOAD_STATE_STARTING",
		2: "WORKLOAD_STATE_RUNNING",
		3: "WORKLOAD_STATE_COMPLETED",
		4: "WORKLOAD_STATE_STOPPING",
		5: "WORKLOAD_STATE_ERROR",
	}
	WorkloadState_value = map[string]int32{
		"WORKLOAD_STATE_UNSPECIFIED": 0,
		"WORKLOAD_STATE_STARTING":    1,
		"WORKLOAD_STATE_RUNNING":     2,
		"WORKLOAD_STATE_COMPLETED":   3,
		"WORKLOAD_STATE_STOPPING":    4,
		"WORKLOAD_STATE_ERROR":       5,
	}
)

func (x WorkloadState) Enum() *WorkloadState {
	p := new(WorkloadState)
	*p = x
	return p
}

func (x WorkloadState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadState) Descriptor() protoreflect.EnumDescriptor {
	return file_wasmcloud_runtime_v2_workload_proto_enumTypes[0].Descriptor()
}

func (WorkloadState) Type() protoreflect.EnumType {
	return &file_wasmcloud_runtime_v2_workload_proto_enumTypes[0]
}

func (x WorkloadState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadState.Descriptor instead.
func (WorkloadState) EnumDescriptor() ([]byte, []int) {
	return file_wasmcloud_runtime_v2_workload_proto_rawDescGZIP(), []int{0}
}

// Workloads are Components that when combined form a complete unit of execution (a.k.a: WIT World fully resolved).
// Workloads also carry an extra Component ( Service ) that can interact with the fully resolved WIT World.
type Workload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Annotations   map[string]string      `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Service       *Service               `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	WitWorld      *WitWorld              `protobuf:"bytes,5,opt,name=wit_world,json=witWorld,proto3" json:"wit_world,omitempty"`
	Volumes       []*Volume              `protobuf:"bytes,6,rep,name=volumes,proto3" json:"volumes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Workload) Reset() {
	*x = Workload{}
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workload) ProtoMessage() {}

func (x *Workload) ProtoReflect() protoreflect.Message {
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workload.ProtoReflect.Descriptor instead.
func (*Workload) Descriptor() ([]byte, []int) {
	return file_wasmcloud_runtime_v2_workload_proto_rawDescGZIP(), []int{0}
}

func (x *Workload) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Workload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workload) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Workload) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Workload) GetWitWorld() *WitWorld {
	if x != nil {
		return x.WitWorld
	}
	return nil
}

func (x *Workload) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type Service struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Image          string                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	LocalResources *LocalResources        `protobuf:"bytes,2,opt,name=local_resources,json=localResources,proto3" json:"local_resources,omitempty"`
	MaxRestarts    uint64                 `protobuf:"varint,3,opt,name=max_restarts,json=maxRestarts,proto3" json:"max_restarts,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_wasmcloud_runtime_v2_workload_proto_rawDescGZIP(), []int{1}
}

func (x *Service) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Service) GetLocalResources() *LocalResources {
	if x != nil {
		return x.LocalResources
	}
	return nil
}

func (x *Service) GetMaxRestarts() uint64 {
	if x != nil {
		return x.MaxRestarts
	}
	return 0
}

// Represents the WIT World (WebAssembly Interface Types)
// World Resolution is the intersection of all Component 'root' interfaces with Host interfaces. It must overlap 100%.
type WitWorld struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Components []*Component           `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
	// Host interfaces that are available to the components.
	// The 'config' on each host_interface may carry Workload Specific configuration.
	HostInterfaces []*WitInterface `protobuf:"bytes,2,rep,name=host_interfaces,json=hostInterfaces,proto3" json:"host_interfaces,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WitWorld) Reset() {
	*x = WitWorld{}
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WitWorld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WitWorld) ProtoMessage() {}

func (x *WitWorld) ProtoReflect() protoreflect.Message {
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WitWorld.ProtoReflect.Descriptor instead.
func (*WitWorld) Descriptor() ([]byte, []int) {
	return file_wasmcloud_runtime_v2_workload_proto_rawDescGZIP(), []int{2}
}

func (x *WitWorld) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *WitWorld) GetHostInterfaces() []*WitInterface {
	if x != nil {
		return x.HostInterfaces
	}
	return nil
}

// Components are the building blocks of a Workload.
// All their invocations happen over WIT Interfaces, and state is ephemeral.
// While they can TCP connect outbound, they cannot accept inbound connections (fail bind call).
type Component struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Image          string                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	LocalResources *LocalResources        `protobuf:"bytes,2,opt,name=local_resources,json=localResources,proto3" json:"local_resources,omitempty"`
	PoolSize       int32                  `protobuf:"zigzag32,3,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty"`
	MaxInvocations int32                  `protobuf:"zigzag32,4,opt,name=max_invocations,json=maxInvocations,proto3" json:"max_invocations,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Component) Reset() {
	*x = Component{}
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_wasmcloud_runtime_v2_workload_proto_rawDescGZIP(), []int{3}
}

func (x *Component) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Component) GetLocalResources() *LocalResources {
	if x != nil {
		return x.LocalResources
	}
	return nil
}

func (x *Component) GetPoolSize() int32 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *Component) GetMaxInvocations() int32 {
	if x != nil {
		return x.MaxInvocations
	}
	return 0
}

type LocalResources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Memory in MiB
	MemoryLimitMb int32 `protobuf:"varint,1,opt,name=memory_limit_mb,json=memoryLimitMb,proto3" json:"memory_limit_mb,omitempty"`
	// CPU in (no idea)
	CpuLimit int32 `protobuf:"varint,2,opt,name=cpu_limit,json=cpuLimit,proto3" json:"cpu_limit,omitempty"`
	// A Generic key/value map for low level component configuration.
	Config map[string]string `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Environment variables for the component, mapped to wasi:cli/env.
	Environment map[string]string `protobuf:"bytes,4,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Volume mounts from the parent Workload
	VolumeMounts []*VolumeMount `protobuf:"bytes,5,rep,name=volume_mounts,json=volumeMounts,proto3" json:"volume_mounts,omitempty"`
	// Allowed Hosts for TCP Outbound connections. "localhost" is always allowed.
	// Can contain wildcards "*" as any part of the hostname.Ex: "*.wasmcloud.io" but not "som*thing.wasmcloud.io"
	// Note this controls socket connections but not DNS lookups.
	// Upon a successful lookup, the host will allow outbound connections to the specified hosts.
	AllowedHosts  []string `protobuf:"bytes,6,rep,name=allowed_hosts,json=allowedHosts,proto3" json:"allowed_hosts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalResources) Reset() {
	*x = LocalResources{}
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalResources) ProtoMessage() {}

func (x *LocalResources) ProtoReflect() protoreflect.Message {
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalResources.ProtoReflect.Descriptor instead.
func (*LocalResources) Descriptor() ([]byte, []int) {
	return file_wasmcloud_runtime_v2_workload_proto_rawDescGZIP(), []int{4}
}

func (x *LocalResources) GetMemoryLimitMb() int32 {
	if x != nil {
		return x.MemoryLimitMb
	}
	return 0
}

func (x *LocalResources) GetCpuLimit() int32 {
	if x != nil {
		return x.CpuLimit
	}
	return 0
}

func (x *LocalResources) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *LocalResources) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *LocalResources) GetVolumeMounts() []*VolumeMount {
	if x != nil {
		return x.VolumeMounts
	}
	return nil
}

func (x *LocalResources) GetAllowedHosts() []string {
	if x != nil {
		return x.AllowedHosts
	}
	return nil
}

type Volume struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to VolumeType:
	//
	//	*Volume_HostPath
	//	*Volume_EmptyDir
	VolumeType    isVolume_VolumeType `protobuf_oneof:"volume_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Volume) Reset() {
	*x = Volume{}
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_wasmcloud_runtime_v2_workload_proto_rawDescGZIP(), []int{5}
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetVolumeType() isVolume_VolumeType {
	if x != nil {
		return x.VolumeType
	}
	return nil
}

func (x *Volume) GetHostPath() *HostPathVolume {
	if x != nil {
		if x, ok := x.VolumeType.(*Volume_HostPath); ok {
			return x.HostPath
		}
	}
	return nil
}

func (x *Volume) GetEmptyDir() *EmptyDirVolume {
	if x != nil {
		if x, ok := x.VolumeType.(*Volume_EmptyDir); ok {
			return x.EmptyDir
		}
	}
	return nil
}

type isVolume_VolumeType interface {
	isVolume_VolumeType()
}

type Volume_HostPath struct {
	HostPath *HostPathVolume `protobuf:"bytes,2,opt,name=host_path,json=hostPath,proto3,oneof"`
}

type Volume_EmptyDir struct {
	EmptyDir *EmptyDirVolume `protobuf:"bytes,3,opt,name=empty_dir,json=emptyDir,proto3,oneof"`
}

func (*Volume_HostPath) isVolume_VolumeType() {}

func (*Volume_EmptyDir) isVolume_VolumeType() {}

type VolumeMount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MountPath     string                 `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	ReadOnly      bool                   `protobuf:"varint,3,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeMount) Reset() {
	*x = VolumeMount{}
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeMount) ProtoMessage() {}

func (x *VolumeMount) ProtoReflect() protoreflect.Message {
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeMount.ProtoReflect.Descriptor instead.
func (*VolumeMount) Descriptor() ([]byte, []int) {
	return file_wasmcloud_runtime_v2_workload_proto_rawDescGZIP(), []int{6}
}

func (x *VolumeMount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *VolumeMount) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type EmptyDirVolume struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmptyDirVolume) Reset() {
	*x = EmptyDirVolume{}
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyDirVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyDirVolume) ProtoMessage() {}

func (x *EmptyDirVolume) ProtoReflect() protoreflect.Message {
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyDirVolume.ProtoReflect.Descriptor instead.
func (*EmptyDirVolume) Descriptor() ([]byte, []int) {
	return file_wasmcloud_runtime_v2_workload_proto_rawDescGZIP(), []int{7}
}

type HostPathVolume struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LocalPath     string                 `protobuf:"bytes,1,opt,name=local_path,json=localPath,proto3" json:"local_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostPathVolume) Reset() {
	*x = HostPathVolume{}
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostPathVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPathVolume) ProtoMessage() {}

func (x *HostPathVolume) ProtoReflect() protoreflect.Message {
	mi := &file_wasmcloud_runtime_v2_workload_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostPathVolume.ProtoReflect.Descriptor instead.
func (*HostPathVolume) Descriptor() ([]byte, []int) {
	return file_wasmcloud_runtime_v2_workload_proto_rawDescGZIP(), []int{8}
}

func (x *HostPathVolume) GetLocalPath() string {
	if x != nil {
		return x.LocalPath
	}
	return ""
}

var File_wasmcloud_runtime_v2_workload_proto protoreflect.FileDescriptor

var file_wasmcloud_runtime_v2_workload_proto_rawDesc = string([]byte{
	0x0a, 0x23, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x1a, 0x28, 0x77, 0x61, 0x73,
	0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76,
	0x32, 0x2f, 0x77, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x02, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x73, 0x6d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3b, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x69, 0x74, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x52, 0x08, 0x77, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x36, 0x0a,
	0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x08, 0x57, 0x69,
	0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x61, 0x73,
	0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe0, 0x03,
	0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x57, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb5, 0x01, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x10, 0x0a, 0x0e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x44, 0x69, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x0e, 0x48, 0x6f, 0x73,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x2a, 0xbd, 0x01, 0x0a, 0x0d, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a,
	0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x4f, 0x52,
	0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x42, 0xdb, 0x01, 0x0a, 0x18, 0x63,
	0x6f, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x42, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x6f, 0x2e, 0x77, 0x61, 0x73,
	0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x57, 0x52, 0x58, 0xaa, 0x02,
	0x14, 0x57, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x14, 0x57, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x20, 0x57,
	0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x16, 0x57, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_wasmcloud_runtime_v2_workload_proto_rawDescOnce sync.Once
	file_wasmcloud_runtime_v2_workload_proto_rawDescData []byte
)

func file_wasmcloud_runtime_v2_workload_proto_rawDescGZIP() []byte {
	file_wasmcloud_runtime_v2_workload_proto_rawDescOnce.Do(func() {
		file_wasmcloud_runtime_v2_workload_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wasmcloud_runtime_v2_workload_proto_rawDesc), len(file_wasmcloud_runtime_v2_workload_proto_rawDesc)))
	})
	return file_wasmcloud_runtime_v2_workload_proto_rawDescData
}

var file_wasmcloud_runtime_v2_workload_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_wasmcloud_runtime_v2_workload_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_wasmcloud_runtime_v2_workload_proto_goTypes = []any{
	(WorkloadState)(0),     // 0: wasmcloud.runtime.v2.WorkloadState
	(*Workload)(nil),       // 1: wasmcloud.runtime.v2.Workload
	(*Service)(nil),        // 2: wasmcloud.runtime.v2.Service
	(*WitWorld)(nil),       // 3: wasmcloud.runtime.v2.WitWorld
	(*Component)(nil),      // 4: wasmcloud.runtime.v2.Component
	(*LocalResources)(nil), // 5: wasmcloud.runtime.v2.LocalResources
	(*Volume)(nil),         // 6: wasmcloud.runtime.v2.Volume
	(*VolumeMount)(nil),    // 7: wasmcloud.runtime.v2.VolumeMount
	(*EmptyDirVolume)(nil), // 8: wasmcloud.runtime.v2.EmptyDirVolume
	(*HostPathVolume)(nil), // 9: wasmcloud.runtime.v2.HostPathVolume
	nil,                    // 10: wasmcloud.runtime.v2.Workload.AnnotationsEntry
	nil,                    // 11: wasmcloud.runtime.v2.LocalResources.ConfigEntry
	nil,                    // 12: wasmcloud.runtime.v2.LocalResources.EnvironmentEntry
	(*WitInterface)(nil),   // 13: wasmcloud.runtime.v2.WitInterface
}
var file_wasmcloud_runtime_v2_workload_proto_depIdxs = []int32{
	10, // 0: wasmcloud.runtime.v2.Workload.annotations:type_name -> wasmcloud.runtime.v2.Workload.AnnotationsEntry
	2,  // 1: wasmcloud.runtime.v2.Workload.service:type_name -> wasmcloud.runtime.v2.Service
	3,  // 2: wasmcloud.runtime.v2.Workload.wit_world:type_name -> wasmcloud.runtime.v2.WitWorld
	6,  // 3: wasmcloud.runtime.v2.Workload.volumes:type_name -> wasmcloud.runtime.v2.Volume
	5,  // 4: wasmcloud.runtime.v2.Service.local_resources:type_name -> wasmcloud.runtime.v2.LocalResources
	4,  // 5: wasmcloud.runtime.v2.WitWorld.components:type_name -> wasmcloud.runtime.v2.Component
	13, // 6: wasmcloud.runtime.v2.WitWorld.host_interfaces:type_name -> wasmcloud.runtime.v2.WitInterface
	5,  // 7: wasmcloud.runtime.v2.Component.local_resources:type_name -> wasmcloud.runtime.v2.LocalResources
	11, // 8: wasmcloud.runtime.v2.LocalResources.config:type_name -> wasmcloud.runtime.v2.LocalResources.ConfigEntry
	12, // 9: wasmcloud.runtime.v2.LocalResources.environment:type_name -> wasmcloud.runtime.v2.LocalResources.EnvironmentEntry
	7,  // 10: wasmcloud.runtime.v2.LocalResources.volume_mounts:type_name -> wasmcloud.runtime.v2.VolumeMount
	9,  // 11: wasmcloud.runtime.v2.Volume.host_path:type_name -> wasmcloud.runtime.v2.HostPathVolume
	8,  // 12: wasmcloud.runtime.v2.Volume.empty_dir:type_name -> wasmcloud.runtime.v2.EmptyDirVolume
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_wasmcloud_runtime_v2_workload_proto_init() }
func file_wasmcloud_runtime_v2_workload_proto_init() {
	if File_wasmcloud_runtime_v2_workload_proto != nil {
		return
	}
	file_wasmcloud_runtime_v2_wit_interface_proto_init()
	file_wasmcloud_runtime_v2_workload_proto_msgTypes[5].OneofWrappers = []any{
		(*Volume_HostPath)(nil),
		(*Volume_EmptyDir)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wasmcloud_runtime_v2_workload_proto_rawDesc), len(file_wasmcloud_runtime_v2_workload_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wasmcloud_runtime_v2_workload_proto_goTypes,
		DependencyIndexes: file_wasmcloud_runtime_v2_workload_proto_depIdxs,
		EnumInfos:         file_wasmcloud_runtime_v2_workload_proto_enumTypes,
		MessageInfos:      file_wasmcloud_runtime_v2_workload_proto_msgTypes,
	}.Build()
	File_wasmcloud_runtime_v2_workload_proto = out.File
	file_wasmcloud_runtime_v2_workload_proto_goTypes = nil
	file_wasmcloud_runtime_v2_workload_proto_depIdxs = nil
}
