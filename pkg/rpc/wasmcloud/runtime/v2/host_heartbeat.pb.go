// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: wasmcloud/runtime/v2/host_heartbeat.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HostHeartbeat struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hostname     string                 `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	FriendlyName string                 `protobuf:"bytes,3,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	Version      string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StartedAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	OsArch       string                 `protobuf:"bytes,7,opt,name=os_arch,json=osArch,proto3" json:"os_arch,omitempty"`
	OsName       string                 `protobuf:"bytes,8,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	OsKernel     string                 `protobuf:"bytes,9,opt,name=os_kernel,json=osKernel,proto3" json:"os_kernel,omitempty"`
	// system cpu usage in percent
	SystemCpuUsage float32 `protobuf:"fixed32,10,opt,name=system_cpu_usage,json=systemCpuUsage,proto3" json:"system_cpu_usage,omitempty"`
	// system total memory in bytes
	SystemMemoryTotal uint64 `protobuf:"varint,11,opt,name=system_memory_total,json=systemMemoryTotal,proto3" json:"system_memory_total,omitempty"`
	// system free memory in bytes
	SystemMemoryFree uint64 `protobuf:"varint,12,opt,name=system_memory_free,json=systemMemoryFree,proto3" json:"system_memory_free,omitempty"`
	ComponentCount   uint64 `protobuf:"varint,13,opt,name=component_count,json=componentCount,proto3" json:"component_count,omitempty"`
	WorkloadCount    uint64 `protobuf:"varint,14,opt,name=workload_count,json=workloadCount,proto3" json:"workload_count,omitempty"`
	// new stuff
	Imports       []*WitInterface `protobuf:"bytes,15,rep,name=imports,proto3" json:"imports,omitempty"`
	Exports       []*WitInterface `protobuf:"bytes,16,rep,name=exports,proto3" json:"exports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostHeartbeat) Reset() {
	*x = HostHeartbeat{}
	mi := &file_wasmcloud_runtime_v2_host_heartbeat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostHeartbeat) ProtoMessage() {}

func (x *HostHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_wasmcloud_runtime_v2_host_heartbeat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostHeartbeat.ProtoReflect.Descriptor instead.
func (*HostHeartbeat) Descriptor() ([]byte, []int) {
	return file_wasmcloud_runtime_v2_host_heartbeat_proto_rawDescGZIP(), []int{0}
}

func (x *HostHeartbeat) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HostHeartbeat) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostHeartbeat) GetFriendlyName() string {
	if x != nil {
		return x.FriendlyName
	}
	return ""
}

func (x *HostHeartbeat) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HostHeartbeat) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *HostHeartbeat) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *HostHeartbeat) GetOsArch() string {
	if x != nil {
		return x.OsArch
	}
	return ""
}

func (x *HostHeartbeat) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *HostHeartbeat) GetOsKernel() string {
	if x != nil {
		return x.OsKernel
	}
	return ""
}

func (x *HostHeartbeat) GetSystemCpuUsage() float32 {
	if x != nil {
		return x.SystemCpuUsage
	}
	return 0
}

func (x *HostHeartbeat) GetSystemMemoryTotal() uint64 {
	if x != nil {
		return x.SystemMemoryTotal
	}
	return 0
}

func (x *HostHeartbeat) GetSystemMemoryFree() uint64 {
	if x != nil {
		return x.SystemMemoryFree
	}
	return 0
}

func (x *HostHeartbeat) GetComponentCount() uint64 {
	if x != nil {
		return x.ComponentCount
	}
	return 0
}

func (x *HostHeartbeat) GetWorkloadCount() uint64 {
	if x != nil {
		return x.WorkloadCount
	}
	return 0
}

func (x *HostHeartbeat) GetImports() []*WitInterface {
	if x != nil {
		return x.Imports
	}
	return nil
}

func (x *HostHeartbeat) GetExports() []*WitInterface {
	if x != nil {
		return x.Exports
	}
	return nil
}

var File_wasmcloud_runtime_v2_host_heartbeat_proto protoreflect.FileDescriptor

var file_wasmcloud_runtime_v2_host_heartbeat_proto_rawDesc = string([]byte{
	0x0a, 0x29, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x77, 0x61, 0x73,
	0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x05, 0x0a,
	0x0d, 0x48, 0x6f, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x73, 0x6d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x73, 0x41, 0x72, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x73, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x73, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x46, 0x72, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x69, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x07, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x69, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0xe4, 0x01, 0x0a, 0x18,
	0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x32, 0x42, 0x12, 0x48, 0x6f, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x73, 0x6d, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x77, 0x61,
	0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x76, 0x32, 0xa2, 0x02, 0x03, 0x57, 0x52, 0x58, 0xaa, 0x02, 0x14, 0x57, 0x61, 0x73, 0x6d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x32, 0xca,
	0x02, 0x14, 0x57, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x20, 0x57, 0x61, 0x73, 0x6d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x57, 0x61, 0x73, 0x6d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x3a,
	0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_wasmcloud_runtime_v2_host_heartbeat_proto_rawDescOnce sync.Once
	file_wasmcloud_runtime_v2_host_heartbeat_proto_rawDescData []byte
)

func file_wasmcloud_runtime_v2_host_heartbeat_proto_rawDescGZIP() []byte {
	file_wasmcloud_runtime_v2_host_heartbeat_proto_rawDescOnce.Do(func() {
		file_wasmcloud_runtime_v2_host_heartbeat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wasmcloud_runtime_v2_host_heartbeat_proto_rawDesc), len(file_wasmcloud_runtime_v2_host_heartbeat_proto_rawDesc)))
	})
	return file_wasmcloud_runtime_v2_host_heartbeat_proto_rawDescData
}

var file_wasmcloud_runtime_v2_host_heartbeat_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_wasmcloud_runtime_v2_host_heartbeat_proto_goTypes = []any{
	(*HostHeartbeat)(nil),         // 0: wasmcloud.runtime.v2.HostHeartbeat
	nil,                           // 1: wasmcloud.runtime.v2.HostHeartbeat.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
	(*WitInterface)(nil),          // 3: wasmcloud.runtime.v2.WitInterface
}
var file_wasmcloud_runtime_v2_host_heartbeat_proto_depIdxs = []int32{
	1, // 0: wasmcloud.runtime.v2.HostHeartbeat.labels:type_name -> wasmcloud.runtime.v2.HostHeartbeat.LabelsEntry
	2, // 1: wasmcloud.runtime.v2.HostHeartbeat.started_at:type_name -> google.protobuf.Timestamp
	3, // 2: wasmcloud.runtime.v2.HostHeartbeat.imports:type_name -> wasmcloud.runtime.v2.WitInterface
	3, // 3: wasmcloud.runtime.v2.HostHeartbeat.exports:type_name -> wasmcloud.runtime.v2.WitInterface
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_wasmcloud_runtime_v2_host_heartbeat_proto_init() }
func file_wasmcloud_runtime_v2_host_heartbeat_proto_init() {
	if File_wasmcloud_runtime_v2_host_heartbeat_proto != nil {
		return
	}
	file_wasmcloud_runtime_v2_wit_interface_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wasmcloud_runtime_v2_host_heartbeat_proto_rawDesc), len(file_wasmcloud_runtime_v2_host_heartbeat_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wasmcloud_runtime_v2_host_heartbeat_proto_goTypes,
		DependencyIndexes: file_wasmcloud_runtime_v2_host_heartbeat_proto_depIdxs,
		MessageInfos:      file_wasmcloud_runtime_v2_host_heartbeat_proto_msgTypes,
	}.Build()
	File_wasmcloud_runtime_v2_host_heartbeat_proto = out.File
	file_wasmcloud_runtime_v2_host_heartbeat_proto_goTypes = nil
	file_wasmcloud_runtime_v2_host_heartbeat_proto_depIdxs = nil
}
