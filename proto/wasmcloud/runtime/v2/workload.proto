syntax = "proto3";

package wasmcloud.runtime.v2;

import "wasmcloud/runtime/v2/wit_interface.proto";

// Workloads are Components that when combined form a complete unit of execution (a.k.a: WIT World fully resolved).
// Workloads also carry an extra Component ( Service ) that can interact with the fully resolved WIT World.
message Workload {
  string namespace = 1;
  string name = 2;
  map<string, string> annotations = 3;

  Service service = 4;
  WitWorld wit_world = 5;

  repeated Volume volumes = 6;
}

enum WorkloadState {
  // Sentinel value, should not be used
  WORKLOAD_STATE_UNSPECIFIED = 0;
  // Workload "start" received by the host and workload is starting.
  // The workload_id is now in the host's internal state.
  // The host might have not performed internal checks yet, resulting in
  // the workload not being started and going into the "error" state.
  WORKLOAD_STATE_STARTING = 1;
  // Workload passed checks and is considered running
  WORKLOAD_STATE_RUNNING = 2;
  // Workload completed execution
  // This indicates the workload executed to completion
  // Useful for wasi:cli/run workloads
  WORKLOAD_STATE_COMPLETED = 3;
  // Workload "stop" received and stopping
  // The host continues to report the workload status
  // until the workload is fully stopped.
  // Then the host removes the workload from its internal state.
  WORKLOAD_STATE_STOPPING = 4;
  // Workload failed to start or stopped due to an error
  WORKLOAD_STATE_ERROR = 5;
}

// Service as in: A Wasm Component that bridges the Unix Model to WASI Component Model.
// - Exports a single "long running interface" ( ex: wasi:cli/run )
//   - Analogous to a Unix Process.
// - Imports interfaces from other Wasm Components in the same Workload, or from the Host.
//   - Analogous to a Unix Process's ability to use libraries and system calls.
// - Act as the "localhost/127.0.0.1" to all Wasm Components in the same Workload.
//   - Ports open by the Service are accessible to Wasm Components in the same Workload as TCPv4 "localhost".
//
// If it exits successfully, the Workload moves to WORKLOAD_STATE_COMPLETED.
// On Error, next step depends on 'max_restarts'.
// - If it has been restarted less than 'max_restarts', it stays as WORKLOAD_STATE_STARTING.
// - If it has been restarted 'max_restarts' times, it moves to WORKLOAD_STATE_ERROR.
//
// Use Cases:
// - Implementing a web server
// - Creating a background worker
// - Caching state across invocations
// - Local Cron Jobs
// - Batch Processing
// - Local Healthcheck

message Service {
  string image = 1;
  LocalResources local_resources = 2;
  uint64 max_restarts = 3;
}

// Represents the WIT World (WebAssembly Interface Types)
// World Resolution is the intersection of all Component 'root' interfaces with Host interfaces. It must overlap 100%.
message WitWorld {
  repeated Component components = 1;
  // Host interfaces that are available to the components.
  // The 'config' on each host_interface may carry Workload Specific configuration.
  repeated WitInterface host_interfaces = 2;
}

// Components are the building blocks of a Workload.
// All their invocations happen over WIT Interfaces, and state is ephemeral.
// While they can TCP connect outbound, they cannot accept inbound connections (fail bind call).
message Component {
  string image = 1;
  LocalResources local_resources = 2;
  sint32 pool_size = 3;
  sint32 max_invocations = 4;
}

message LocalResources {
  // Memory in MiB
  int32 memory_limit_mb = 1;
  // CPU in (no idea)
  int32 cpu_limit = 2;
  // A Generic key/value map for low level component configuration.
  map<string, string> config = 3;
  // Environment variables for the component, mapped to wasi:cli/env.
  map<string, string> environment = 4;
  // Volume mounts from the parent Workload
  repeated VolumeMount volume_mounts = 5;
  // Allowed Hosts for TCP Outbound connections. "localhost" is always allowed.
  // Can contain wildcards "*" as any part of the hostname.Ex: "*.wasmcloud.io" but not "som*thing.wasmcloud.io"
  // Note this controls socket connections but not DNS lookups.
  // Upon a successful lookup, the host will allow outbound connections to the specified hosts.
  repeated string allowed_hosts = 6;
}

message Volume {
  string name = 1;
  oneof volume_type {
    HostPathVolume host_path = 2;
    EmptyDirVolume empty_dir = 3;
  }
}

message VolumeMount {
  string name = 1;
  string mount_path = 2;
  bool read_only = 3;
}

message EmptyDirVolume {}
message HostPathVolume {
  string local_path = 1;
}
